{"ast":null,"code":"var _jsxFileName = \"/Users/learn/Desktop/Battleship-prototype/src/components/Game.js\";\nimport React, { Component } from 'react';\nimport Box from './Box';\n\nclass Game extends Component {\n  constructor() {\n    super(); //This is our ships, and how big they are\n\n    this.checkYourWork = arr => {\n      let x = 0;\n\n      for (let i = 0; i < this.listOfShips.length; i++) {\n        x += this.listOfShips[i];\n      }\n\n      let y = 0;\n\n      for (let i = 0; i < arr.length; i++) {\n        for (let j = 0; j < arr[i].length; j++) {\n          if (arr[i][j] !== 0) {\n            y += 1;\n          }\n        }\n      }\n\n      if (x !== y) {\n        return false;\n      } else if (x === y) {\n        return true;\n      }\n    };\n\n    this.tempFunt = (value, ammo) => {\n      let temp = this.state.deathCounter;\n      console.log(temp);\n\n      if (this.listOfShips[value - 1] !== 0) {\n        this.listOfShips[value - 1] -= 1;\n        this.setState({\n          shipHealth: this.listOfShips\n        });\n\n        if (this.state.shipHealth[value - 1] === 0) {\n          temp += 1;\n          console.log(temp);\n          this.setState({\n            deathCounter: temp\n          });\n          console.log(this.state.deathCounter);\n          console.log(this.state.shipHealth.length);\n\n          if (this.state.deathCounter === this.state.shipHealth.length - 1) {\n            this.setState({\n              winStatus: true\n            });\n          }\n        }\n      }\n\n      if (ammo > 0) {\n        let currAmmo = ammo;\n        currAmmo -= 1;\n        this.setState({\n          ammo: currAmmo\n        });\n\n        if (currAmmo === 0) {\n          this.setState({\n            winStatus: false\n          });\n        }\n\n        console.log(this.state.ammo);\n      }\n    };\n\n    this.listOfShips = [4, 3, 2, 5, 3];\n    this.state = {\n      //Will have our final array of ships populated in it\n      gameBoard: this.bigFunction(),\n      shipHealth: this.listOfShips,\n      ammo: 3,\n      canShoot: 0,\n      winStatus: \"\",\n      deathCounter: 0\n    };\n  }\n\n  bigFunction() {\n    //Creates the wireframe for our array\n    let tempArray = Array(10).fill().map(n => Array(10).fill(0)); //Make sure the god dang thing works\n\n    console.log(tempArray); //Loop to create the actual ships\n\n    for (let i = 0; i < this.listOfShips.length; i++) {\n      //Unique ship identifier\n      let increment = i + 1; // Creates the ship, using the index of the ship array, passes in our wireframe, and the unique identifier\n\n      tempArray = this.placeShip(this.listOfShips[i], tempArray, increment);\n    } //Lets us see the populated array\n\n\n    console.log(tempArray);\n    let check = this.checkYourWork(tempArray);\n\n    while (check === false) {\n      tempArray = this.bigFunction();\n      check = this.checkYourWork(tempArray);\n    }\n\n    return tempArray;\n  }\n\n  placeShip(arg, arr, increment) {\n    //Choose either a vertical or horizontal ship placement\n    let flipCoin = Math.floor(Math.random() * 2); //Grab a Random index for the array\n\n    let rIndexOne = Math.floor(Math.random() * arr.length);\n    let rIndexTwo = Math.floor(Math.random() * arr.length); //Make sure that the place we are setting our ship into is not taken\n\n    while (this.collisionFunct(flipCoin, rIndexOne, rIndexTwo, arr, arg) === false) {\n      //If it was taken, find a new place\n      rIndexOne = Math.floor(Math.random() * arr.length);\n      rIndexTwo = Math.floor(Math.random() * arr.length);\n    } //0 means we are looking vertically\n\n\n    if (flipCoin === 0) {\n      //Assigns the indexes with our unique idenifier\n      for (let i = 0; i < arg; i++) {\n        arr[rIndexOne + i][rIndexTwo] = increment;\n      } //0 means we are looking horizontally\n\n    } else if (flipCoin === 1) {\n      for (let i = 0; i < arg; i++) {\n        //Assigns the indexes with our unique idenifier\n        arr[rIndexOne][rIndexTwo + i] = increment;\n      }\n    } //Returns the array with the ship inside of it\n\n\n    return arr;\n  }\n\n  collisionFunct(coin, rI1, rI2, arr, arg) {\n    //I doing a vertical check if the coin was 0\n    if (coin === 0) {\n      //I create a loop to check every index for the size of my ship\n      for (let i = 0; i < arg; i++) {\n        //I create a variable to return my boolean statement\n        let x = \"\"; //I make sure that the place I am checking exists in my array\n\n        if (rI1 + i < arr.length - 1 && rI1 + arg < arr.length - i) {\n          //I check if the value I am looking at is not a 0\n          if (arr[rI1 + i][rI2] !== 0) {\n            //If I am not a 0, do not write\n            x = false;\n          } else {\n            //I am a 0, go ahead and write\n            x = true;\n          }\n        } else {\n          //I dont exist in the array, dont write anything\n          x = false;\n        } //Return my boolean at the end of my loops\n\n\n        if (i + 1 === arg) {\n          return x;\n        }\n      } // Horizontal Checking below\n\n    } else if (coin === 1) {\n      //I create a loop to check every index for the size of my ship\n      for (let i = 0; i < arg; i++) {\n        //I create a variable to return my boolean statement\n        let x = \"\"; //I make sure the place I am checking exists in my array\n\n        if (rI2 + i < arr.length - 1 && rI2 + arg < arr.length - i) {\n          //I check fi the value I am looking at is not a 0\n          if (arr[rI1][rI2 + i] !== 0) {\n            //If I am not a 0, do not write\n            x = false;\n          } else {\n            //I am a 0, go ahead and write\n            x = true;\n          } //I dont exist in the array, dont write anything\n\n        } else {\n          x = false;\n        } //Return my boolean at the end of my loops\n\n\n        if (i + 1 === arg) {\n          return x;\n        }\n      }\n    }\n  }\n\n  boxPopulation(arr) {\n    let finalArr = [];\n\n    for (let i = 0; i < arr.length; i++) {\n      finalArr.push(arr[i].map((value, index) => {\n        return React.createElement(Box, {\n          value: value,\n          index: index,\n          ammo: this.state.ammo,\n          canShoot: this.state.canShoot,\n          tempFunt: this.tempFunt,\n          winCheck: this.winCheck,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 153\n          },\n          __self: this\n        });\n      }));\n    }\n\n    console.log(finalArr);\n    return finalArr;\n  }\n\n  shipsHPArray(arr) {\n    let shipArray = [];\n    let healthArray = [];\n    let noComma = [];\n\n    for (let i = 0; i < this.listOfShips.length; i++) {\n      for (let j = 0; j < arr[i]; j++) {\n        if (this.state.shipHealth[i] === 0) {\n          noComma = \"☠️\";\n        }\n\n        healthArray.push(\"❤️\");\n        noComma = healthArray.join(\"\");\n      }\n\n      shipArray.push(`🚢 HP: ${noComma}`, React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213\n        },\n        __self: this\n      }));\n      healthArray = [];\n    }\n\n    return shipArray;\n  }\n\n  render() {\n    let start = this.boxPopulation(this.state.gameBoard);\n    let shipHP = this.shipsHPArray(this.state.shipHealth);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"centerBoard\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"wrap\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"outerBox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }, \"Ammo: \", this.state.ammo), React.createElement(\"span\", {\n      className: \"squareIt\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }, start), React.createElement(\"p\", {\n      className: \"outerBox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }, \"Enemy Ship Health: \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    }), shipHP, \" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    })))), React.createElement(\"div\", {\n      className: \"centerMessage\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }, this.state.winStatus === true && React.createElement(\"span\", {\n      className: \"endText onTopWinner\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      },\n      __self: this\n    }, \"You Win\"), this.state.winStatus === false && React.createElement(\"span\", {\n      className: \"endText onTopLoser\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }, \"You Lose\")));\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["/Users/learn/Desktop/Battleship-prototype/src/components/Game.js"],"names":["React","Component","Box","Game","constructor","checkYourWork","arr","x","i","listOfShips","length","y","j","tempFunt","value","ammo","temp","state","deathCounter","console","log","setState","shipHealth","winStatus","currAmmo","gameBoard","bigFunction","canShoot","tempArray","Array","fill","map","n","increment","placeShip","check","arg","flipCoin","Math","floor","random","rIndexOne","rIndexTwo","collisionFunct","coin","rI1","rI2","boxPopulation","finalArr","push","index","winCheck","shipsHPArray","shipArray","healthArray","noComma","join","render","start","shipHP"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,GAAP,MAAgB,OAAhB;;AAEA,MAAMC,IAAN,SAAmBF,SAAnB,CAA6B;AAEzBG,EAAAA,WAAW,GAAE;AACT,YADS,CAET;;AAFS,SA2CbC,aA3Ca,GA2CIC,GAAD,IAAS;AACrB,UAAIC,CAAC,GAAG,CAAR;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,WAAL,CAAiBC,MAArC,EAA6CF,CAAC,EAA9C,EAAiD;AAC7CD,QAAAA,CAAC,IAAI,KAAKE,WAAL,CAAiBD,CAAjB,CAAL;AACH;;AACD,UAAIG,CAAC,GAAG,CAAR;;AACA,WAAI,IAAIH,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGF,GAAG,CAACI,MAAvB,EAA+BF,CAAC,EAAhC,EAAmC;AAC/B,aAAI,IAAII,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAACN,GAAG,CAACE,CAAD,CAAH,CAAOE,MAAxB,EAAgCE,CAAC,EAAjC,EAAoC;AAChC,cAAIN,GAAG,CAACE,CAAD,CAAH,CAAOI,CAAP,MAAc,CAAlB,EAAoB;AAChBD,YAAAA,CAAC,IAAI,CAAL;AACH;AACJ;AACJ;;AACD,UAAIJ,CAAC,KAAKI,CAAV,EAAY;AACR,eAAO,KAAP;AACH,OAFD,MAEO,IAAIJ,CAAC,KAAKI,CAAV,EAAa;AAChB,eAAO,IAAP;AACH;AACJ,KA7DY;;AAAA,SAkKbE,QAlKa,GAkKF,CAACC,KAAD,EAAQC,IAAR,KAAiB;AACxB,UAAIC,IAAI,GAAG,KAAKC,KAAL,CAAWC,YAAtB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;;AAEA,UAAM,KAAKP,WAAL,CAAiBK,KAAK,GAAC,CAAvB,MAA8B,CAApC,EAAsC;AAClC,aAAKL,WAAL,CAAiBK,KAAK,GAAC,CAAvB,KAA6B,CAA7B;AACA,aAAKO,QAAL,CAAc;AAACC,UAAAA,UAAU,EAAE,KAAKb;AAAlB,SAAd;;AACA,YAAI,KAAKQ,KAAL,CAAWK,UAAX,CAAsBR,KAAK,GAAC,CAA5B,MAAmC,CAAvC,EAAyC;AACrCE,UAAAA,IAAI,IAAI,CAAR;AACAG,UAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AAEA,eAAKK,QAAL,CAAc;AAAEH,YAAAA,YAAY,EAAGF;AAAjB,WAAd;AACAG,UAAAA,OAAO,CAACC,GAAR,CAAY,KAAKH,KAAL,CAAWC,YAAvB;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAY,KAAKH,KAAL,CAAWK,UAAX,CAAsBZ,MAAlC;;AAEA,cAAI,KAAKO,KAAL,CAAWC,YAAX,KAA4B,KAAKD,KAAL,CAAWK,UAAX,CAAsBZ,MAAtB,GAA6B,CAA7D,EAA+D;AAC3D,iBAAKW,QAAL,CAAc;AAAEE,cAAAA,SAAS,EAAE;AAAb,aAAd;AACH;AACJ;AACJ;;AACD,UAAIR,IAAI,GAAG,CAAX,EAAa;AACT,YAAIS,QAAQ,GAAGT,IAAf;AACAS,QAAAA,QAAQ,IAAI,CAAZ;AACA,aAAKH,QAAL,CAAc;AAAEN,UAAAA,IAAI,EAAGS;AAAT,SAAd;;AACA,YAAIA,QAAQ,KAAK,CAAjB,EAAmB;AACf,eAAKH,QAAL,CAAc;AAAEE,YAAAA,SAAS,EAAE;AAAb,WAAd;AACH;;AACDJ,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAKH,KAAL,CAAWF,IAAvB;AACH;AACJ,KA/LY;;AAGT,SAAKN,WAAL,GAAmB,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,CAAnB;AACA,SAAKQ,KAAL,GAAa;AACT;AACAQ,MAAAA,SAAS,EAAE,KAAKC,WAAL,EAFF;AAGTJ,MAAAA,UAAU,EAAE,KAAKb,WAHR;AAITM,MAAAA,IAAI,EAAE,CAJG;AAKTY,MAAAA,QAAQ,EAAE,CALD;AAMTJ,MAAAA,SAAS,EAAE,EANF;AAOTL,MAAAA,YAAY,EAAE;AAPL,KAAb;AASH;;AAEDQ,EAAAA,WAAW,GAAG;AACV;AACA,QAAIE,SAAS,GAAGC,KAAK,CAAC,EAAD,CAAL,CAAUC,IAAV,GAAiBC,GAAjB,CAAqBC,CAAC,IAAIH,KAAK,CAAC,EAAD,CAAL,CAAUC,IAAV,CAAe,CAAf,CAA1B,CAAhB,CAFU,CAIV;;AACAX,IAAAA,OAAO,CAACC,GAAR,CAAYQ,SAAZ,EALU,CAOV;;AACA,SAAI,IAAIpB,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAE,KAAKC,WAAL,CAAiBC,MAAnC,EAA2CF,CAAC,EAA5C,EAA+C;AAC3C;AACA,UAAIyB,SAAS,GAAGzB,CAAC,GAAC,CAAlB,CAF2C,CAG3C;;AACAoB,MAAAA,SAAS,GAAG,KAAKM,SAAL,CAAe,KAAKzB,WAAL,CAAiBD,CAAjB,CAAf,EAAoCoB,SAApC,EAA+CK,SAA/C,CAAZ;AACH,KAbS,CAeV;;;AACAd,IAAAA,OAAO,CAACC,GAAR,CAAYQ,SAAZ;AAEA,QAAIO,KAAK,GAAG,KAAK9B,aAAL,CAAmBuB,SAAnB,CAAZ;;AAEA,WAAOO,KAAK,KAAK,KAAjB,EAAuB;AACnBP,MAAAA,SAAS,GAAI,KAAKF,WAAL,EAAb;AACAS,MAAAA,KAAK,GAAG,KAAK9B,aAAL,CAAmBuB,SAAnB,CAAR;AACH;;AAED,WAAOA,SAAP;AACH;;AAsBDM,EAAAA,SAAS,CAACE,GAAD,EAAM9B,GAAN,EAAW2B,SAAX,EAAsB;AAC3B;AACA,QAAII,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,CAAzB,CAAf,CAF2B,CAI3B;;AACA,QAAIC,SAAS,GAAGH,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAclC,GAAG,CAACI,MAA7B,CAAhB;AACA,QAAIgC,SAAS,GAAGJ,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAclC,GAAG,CAACI,MAA7B,CAAhB,CAN2B,CAQ3B;;AACA,WAAO,KAAKiC,cAAL,CAAoBN,QAApB,EAA8BI,SAA9B,EAAyCC,SAAzC,EAAoDpC,GAApD,EAAyD8B,GAAzD,MAAkE,KAAzE,EAA+E;AAC3E;AACAK,MAAAA,SAAS,GAAGH,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAclC,GAAG,CAACI,MAA7B,CAAZ;AACAgC,MAAAA,SAAS,GAAGJ,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAclC,GAAG,CAACI,MAA7B,CAAZ;AACH,KAb0B,CAe3B;;;AACA,QAAI2B,QAAQ,KAAK,CAAjB,EAAmB;AACf;AACA,WAAI,IAAI7B,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG4B,GAAnB,EAAwB5B,CAAC,EAAzB,EAA4B;AACxBF,QAAAA,GAAG,CAACmC,SAAS,GAACjC,CAAX,CAAH,CAAiBkC,SAAjB,IAA8BT,SAA9B;AAEH,OALc,CAMf;;AACH,KAPD,MAOO,IAAII,QAAQ,KAAK,CAAjB,EAAmB;AACtB,WAAI,IAAI7B,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG4B,GAAnB,EAAwB5B,CAAC,EAAzB,EAA4B;AACxB;AACAF,QAAAA,GAAG,CAACmC,SAAD,CAAH,CAAeC,SAAS,GAAClC,CAAzB,IAA8ByB,SAA9B;AACH;AACJ,KA5B0B,CA6B3B;;;AACA,WAAO3B,GAAP;AACH;;AAEDqC,EAAAA,cAAc,CAACC,IAAD,EAAOC,GAAP,EAAYC,GAAZ,EAAiBxC,GAAjB,EAAsB8B,GAAtB,EAA2B;AACrC;AACA,QAAIQ,IAAI,KAAK,CAAb,EAAe;AACX;AACA,WAAI,IAAIpC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAC4B,GAAjB,EAAsB5B,CAAC,EAAvB,EAA0B;AACtB;AACA,YAAID,CAAC,GAAG,EAAR,CAFsB,CAGtB;;AACA,YAAIsC,GAAG,GAACrC,CAAJ,GAAQF,GAAG,CAACI,MAAJ,GAAW,CAAnB,IAAwBmC,GAAG,GAACT,GAAJ,GAAU9B,GAAG,CAACI,MAAJ,GAAWF,CAAjD,EAAmD;AAC/C;AACA,cAAIF,GAAG,CAACuC,GAAG,GAACrC,CAAL,CAAH,CAAWsC,GAAX,MAAoB,CAAxB,EAA0B;AACtB;AACAvC,YAAAA,CAAC,GAAG,KAAJ;AACH,WAHD,MAGM;AACF;AACAA,YAAAA,CAAC,GAAG,IAAJ;AACH;AACJ,SATD,MASO;AACH;AACAA,UAAAA,CAAC,GAAG,KAAJ;AACH,SAhBqB,CAiBtB;;;AACA,YAAIC,CAAC,GAAC,CAAF,KAAQ4B,GAAZ,EAAgB;AAAE,iBAAO7B,CAAP;AAAS;AAC9B,OArBU,CAqBV;;AACJ,KAtBD,MAsBO,IAAIqC,IAAI,KAAK,CAAb,EAAe;AAClB;AACA,WAAI,IAAIpC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAC4B,GAAjB,EAAsB5B,CAAC,EAAvB,EAA0B;AACtB;AACA,YAAID,CAAC,GAAG,EAAR,CAFsB,CAGtB;;AACA,YAAIuC,GAAG,GAACtC,CAAJ,GAAQF,GAAG,CAACI,MAAJ,GAAW,CAAnB,IAAwBoC,GAAG,GAACV,GAAJ,GAAU9B,GAAG,CAACI,MAAJ,GAAWF,CAAjD,EAAmD;AAC/C;AACA,cAAIF,GAAG,CAACuC,GAAD,CAAH,CAASC,GAAG,GAACtC,CAAb,MAAoB,CAAxB,EAA0B;AACtB;AACAD,YAAAA,CAAC,GAAG,KAAJ;AACH,WAHD,MAGM;AACF;AACAA,YAAAA,CAAC,GAAG,IAAJ;AACH,WAR8C,CAS/C;;AACH,SAVD,MAUO;AAAEA,UAAAA,CAAC,GAAG,KAAJ;AAAW,SAdE,CAetB;;;AACA,YAAIC,CAAC,GAAC,CAAF,KAAQ4B,GAAZ,EAAgB;AAAE,iBAAO7B,CAAP;AAAS;AAC9B;AACJ;AACJ;;AAEDwC,EAAAA,aAAa,CAACzC,GAAD,EAAM;AACf,QAAI0C,QAAQ,GAAG,EAAf;;AACA,SAAK,IAAIxC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,GAAG,CAACI,MAAxB,EAAgCF,CAAC,EAAjC,EAAoC;AAChCwC,MAAAA,QAAQ,CAACC,IAAT,CAAc3C,GAAG,CAACE,CAAD,CAAH,CAAOuB,GAAP,CAAW,CAACjB,KAAD,EAAOoC,KAAP,KAAiB;AAAC,eACvC,oBAAC,GAAD;AACI,UAAA,KAAK,EAAIpC,KADb;AAEI,UAAA,KAAK,EAAIoC,KAFb;AAGI,UAAA,IAAI,EAAK,KAAKjC,KAAL,CAAWF,IAHxB;AAII,UAAA,QAAQ,EAAK,KAAKE,KAAL,CAAWU,QAJ5B;AAKI,UAAA,QAAQ,EAAK,KAAKd,QALtB;AAMI,UAAA,QAAQ,EAAI,KAAKsC,QANrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADuC;AAQnC,OARM,CAAd;AAUH;;AAEDhC,IAAAA,OAAO,CAACC,GAAR,CAAY4B,QAAZ;AACA,WAAOA,QAAP;AACH;;AAiCDI,EAAAA,YAAY,CAAC9C,GAAD,EAAM;AACd,QAAI+C,SAAS,GAAG,EAAhB;AACA,QAAIC,WAAW,GAAG,EAAlB;AACA,QAAIC,OAAO,GAAG,EAAd;;AAEA,SAAK,IAAI/C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,WAAL,CAAiBC,MAArC,EAA6CF,CAAC,EAA9C,EAAiD;AAC7C,WAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAEN,GAAG,CAACE,CAAD,CAAtB,EAA2BI,CAAC,EAA5B,EAA+B;AAC3B,YAAG,KAAKK,KAAL,CAAWK,UAAX,CAAsBd,CAAtB,MAA6B,CAAhC,EAAkC;AAC9B+C,UAAAA,OAAO,GAAG,IAAV;AACH;;AACDD,QAAAA,WAAW,CAACL,IAAZ,CAAiB,IAAjB;AACAM,QAAAA,OAAO,GAAGD,WAAW,CAACE,IAAZ,CAAiB,EAAjB,CAAV;AAEH;;AACDH,MAAAA,SAAS,CAACJ,IAAV,CAAgB,UAASM,OAAQ,EAAjC,EAAoC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAApC;AACAD,MAAAA,WAAW,GAAG,EAAd;AACH;;AACD,WAAOD,SAAP;AACH;;AAEDI,EAAAA,MAAM,GAAE;AACJ,QAAIC,KAAK,GAAG,KAAKX,aAAL,CAAmB,KAAK9B,KAAL,CAAWQ,SAA9B,CAAZ;AACA,QAAIkC,MAAM,GAAG,KAAKP,YAAL,CAAkB,KAAKnC,KAAL,CAAWK,UAA7B,CAAb;AACA,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAG,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAG,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAG,MAAA,SAAS,EAAG,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACW,KAAKL,KAAL,CAAWF,IADtB,CADJ,EAII;AAAM,MAAA,SAAS,EAAG,UAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACM2C,KADN,CAJJ,EAOI;AAAG,MAAA,SAAS,EAAG,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BACuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADvB,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,EAGMC,MAHN,OAGe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHf,CAPJ,CADJ,CADJ,EAgBI;AAAK,MAAA,SAAS,EAAG,eAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAK1C,KAAL,CAAWM,SAAX,KAAyB,IAAzB,IACG;AAAM,MAAA,SAAS,EAAG,qBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAFR,EAIK,KAAKN,KAAL,CAAWM,SAAX,KAAyB,KAAzB,IACG;AAAM,MAAA,SAAS,EAAG,oBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBALR,CAhBJ,CADJ;AA2BH;;AArPwB;;AAwP7B,eAAepB,IAAf","sourcesContent":["import React, {Component} from 'react';\nimport Box from './Box'\n\nclass Game extends Component {\n\n    constructor(){\n        super()\n        //This is our ships, and how big they are\n        this.listOfShips = [4,3,2,5,3]\n        this.state = {\n            //Will have our final array of ships populated in it\n            gameBoard: this.bigFunction(),\n            shipHealth: this.listOfShips,\n            ammo: 3,\n            canShoot: 0,\n            winStatus: \"\",\n            deathCounter: 0\n        }\n    }\n\n    bigFunction() {\n        //Creates the wireframe for our array\n        let tempArray = Array(10).fill().map(n => Array(10).fill(0));\n\n        //Make sure the god dang thing works\n        console.log(tempArray)\n\n        //Loop to create the actual ships\n        for(let i = 0; i< this.listOfShips.length; i++){\n            //Unique ship identifier\n            let increment = i+1;\n            // Creates the ship, using the index of the ship array, passes in our wireframe, and the unique identifier\n            tempArray = this.placeShip(this.listOfShips[i], tempArray, increment)\n        }\n\n        //Lets us see the populated array\n        console.log(tempArray)\n\n        let check = this.checkYourWork(tempArray)\n\n        while (check === false){\n            tempArray =  this.bigFunction();\n            check = this.checkYourWork(tempArray);\n        }\n\n        return tempArray; \n    }\n\n    checkYourWork = (arr) => {\n        let x = 0;\n        for (let i = 0; i < this.listOfShips.length; i++){\n            x += this.listOfShips[i]; \n        }\n        let y = 0;\n        for(let i = 0; i < arr.length; i++){\n            for(let j = 0; j<arr[i].length; j++){\n                if (arr[i][j] !== 0){\n                    y += 1;\n                }\n            }\n        }\n        if (x !== y){\n            return false;\n        } else if (x === y) {\n            return true;\n        }\n    }\n\n    placeShip(arg, arr, increment) {\n        //Choose either a vertical or horizontal ship placement\n        let flipCoin = Math.floor(Math.random()*2)\n\n        //Grab a Random index for the array\n        let rIndexOne = Math.floor(Math.random()*arr.length)\n        let rIndexTwo = Math.floor(Math.random()*arr.length)\n\n        //Make sure that the place we are setting our ship into is not taken\n        while (this.collisionFunct(flipCoin, rIndexOne, rIndexTwo, arr, arg) === false){\n            //If it was taken, find a new place\n            rIndexOne = Math.floor(Math.random()*arr.length)\n            rIndexTwo = Math.floor(Math.random()*arr.length)\n        }\n\n        //0 means we are looking vertically\n        if (flipCoin === 0){\n            //Assigns the indexes with our unique idenifier\n            for(let i = 0; i < arg; i++){\n                arr[rIndexOne+i][rIndexTwo] = increment;\n                \n            }\n            //0 means we are looking horizontally\n        } else if (flipCoin === 1){\n            for(let i = 0; i < arg; i++){\n                //Assigns the indexes with our unique idenifier\n                arr[rIndexOne][rIndexTwo+i] = increment;\n            }\n        }\n        //Returns the array with the ship inside of it\n        return arr;\n    }\n\n    collisionFunct(coin, rI1, rI2, arr, arg) {\n        //I doing a vertical check if the coin was 0\n        if (coin === 0){\n            //I create a loop to check every index for the size of my ship\n            for(let i = 0; i<arg; i++){\n                //I create a variable to return my boolean statement\n                let x = \"\";\n                //I make sure that the place I am checking exists in my array\n                if (rI1+i < arr.length-1 && rI1+arg < arr.length-i){\n                    //I check if the value I am looking at is not a 0\n                    if (arr[rI1+i][rI2] !== 0){\n                        //If I am not a 0, do not write\n                        x = false;\n                    } else{\n                        //I am a 0, go ahead and write\n                        x = true;\n                    }\n                } else {\n                    //I dont exist in the array, dont write anything\n                    x = false;\n                }\n                //Return my boolean at the end of my loops\n                if (i+1 === arg){ return x}\n            }// Horizontal Checking below\n        } else if (coin === 1){\n            //I create a loop to check every index for the size of my ship\n            for(let i = 0; i<arg; i++){\n                //I create a variable to return my boolean statement\n                let x = \"\";\n                //I make sure the place I am checking exists in my array\n                if (rI2+i < arr.length-1 && rI2+arg < arr.length-i){\n                    //I check fi the value I am looking at is not a 0\n                    if (arr[rI1][rI2+i] !== 0){\n                        //If I am not a 0, do not write\n                        x = false;\n                    } else{\n                        //I am a 0, go ahead and write\n                        x = true;\n                    }\n                    //I dont exist in the array, dont write anything\n                } else { x = false;}\n                //Return my boolean at the end of my loops\n                if (i+1 === arg){ return x}\n            }\n        }\n    }\n\n    boxPopulation(arr) {\n        let finalArr = [];\n        for( let i = 0; i < arr.length; i++){\n            finalArr.push(arr[i].map((value,index) => {return(\n                <Box \n                    value = {value}\n                    index = {index}\n                    ammo = { this.state.ammo }\n                    canShoot = { this.state.canShoot }\n                    tempFunt = { this.tempFunt }\n                    winCheck = {this.winCheck}\n                />)}\n            ));\n        }\n\n        console.log(finalArr)\n        return finalArr\n    }\n\n    tempFunt = (value, ammo) => {\n        let temp = this.state.deathCounter\n        console.log(temp);\n        \n        if (  this.listOfShips[value-1] !== 0){\n            this.listOfShips[value-1] -= 1;\n            this.setState({shipHealth: this.listOfShips})\n            if (this.state.shipHealth[value-1] === 0){\n                temp += 1;\n                console.log(temp);\n                \n                this.setState({ deathCounter : temp })\n                console.log(this.state.deathCounter);\n                console.log(this.state.shipHealth.length);\n                \n                if( this.state.deathCounter === this.state.shipHealth.length-1){\n                    this.setState({ winStatus: true})\n                }\n            }\n        }\n        if (ammo > 0){\n            let currAmmo = ammo;\n            currAmmo -= 1;\n            this.setState({ ammo : currAmmo })\n            if (currAmmo === 0){\n                this.setState({ winStatus: false})\n            }\n            console.log(this.state.ammo);\n        }\n    }\n    \n    shipsHPArray(arr) {\n        let shipArray = [];\n        let healthArray = [];\n        let noComma = []\n\n        for (let i = 0; i < this.listOfShips.length; i++){\n            for (let j = 0; j< arr[i]; j++){\n                if(this.state.shipHealth[i] === 0){\n                    noComma = \"☠️\"\n                }\n                healthArray.push(\"❤️\")\n                noComma = healthArray.join(\"\");\n\n            }\n            shipArray.push(`🚢 HP: ${noComma}`, <br/>)\n            healthArray = [];\n        }\n        return shipArray\n    }\n\n    render(){\n        let start = this.boxPopulation(this.state.gameBoard);\n        let shipHP = this.shipsHPArray(this.state.shipHealth);\n        return (\n            <div>\n                <div className = \"centerBoard\">\n                    <div className = \"wrap\">\n                        <p className = \"outerBox\">\n                            Ammo: {this.state.ammo}\n                        </p>\n                        <span className = \"squareIt\">\n                            { start }\n                        </span>\n                        <p className = \"outerBox\">\n                            Enemy Ship Health: <br/>\n                            <br/>\n                            { shipHP } <br/>\n                        </p>\n                    </div>\n                </div>\n                <div className = \"centerMessage\">\n                    {this.state.winStatus === true &&\n                        <span className = \"endText onTopWinner\">You Win</span>\n                    }\n                    {this.state.winStatus === false &&\n                        <span className = \"endText onTopLoser\">You Lose</span>\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Game;"]},"metadata":{},"sourceType":"module"}