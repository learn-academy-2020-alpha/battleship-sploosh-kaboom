{"ast":null,"code":"var _jsxFileName = \"/Users/learn/Desktop/Battleship-prototype/src/components/Game.js\";\nimport React, { Component } from 'react';\nimport Box from './Box';\n\nclass Game extends Component {\n  constructor() {\n    super(); //This is our ships, and how big they are\n\n    this.checkYourWork = arr => {\n      let x = 0; //Add all the values in the array together\n\n      for (let i = 0; i < this.listOfShips.length; i++) {\n        x += this.listOfShips[i];\n      } //A tracker to see how many elements are not 0\n\n\n      let y = 0;\n\n      for (let i = 0; i < arr.length; i++) {\n        for (let j = 0; j < arr[i].length; j++) {\n          if (arr[i][j] !== 0) {\n            //If you are not 0, add to the tracker\n            y += 1;\n          }\n        }\n      } //If we do not have matching numbers, our collision didnt work properly\n\n\n      if (x !== y) {\n        return false;\n      } else if (x === y) {\n        return true;\n      }\n    };\n\n    this.tempFunt = (value, ammo) => {\n      //Keep track of how many ships are dead\n      let temp = this.state.deathCounter; //This is broken - WIP\n\n      for (let i = 0; i < this.state.shipHealth.length; i++) {\n        let newVal = (value - 1) * 2;\n\n        if (i === newVal) {\n          let newHealth = this.state.shipHealth;\n          let newHealthElement = newHealth[i];\n          let x = newHealthElement.split(\"\");\n          x.pop();\n          x.pop();\n          newHealth[i] = x.join(\"\");\n          console.log(\"New Health: \", newHealth);\n          console.log(\"New Health Element\", newHealthElement);\n          this.setState({\n            shipHealth: newHealth\n          });\n          console.log(this.state.shipHealth);\n        }\n      } //Ammo Tracker\n\n\n      if (ammo > 0) {\n        let currAmmo = ammo;\n        currAmmo -= 1;\n        this.setState({\n          ammo: currAmmo\n        });\n        this.seeAmmo(this.state.ammo); //If we are out of ammo you lose\n\n        if (currAmmo === 0) {\n          this.setState({\n            winStatus: false\n          });\n        }\n      }\n    };\n\n    this.listOfShips = [4, 3, 2, 5, 3];\n    this.state = {\n      //Will have our final array of ships populated in it\n      gameBoard: this.bigFunction(),\n      shipHealth: this.shipsHPArray(this.listOfShips),\n      ammo: 50,\n      ammoVisual: [],\n      canShoot: 0,\n      winStatus: \"\",\n      deathCounter: 0\n    };\n  }\n\n  bigFunction() {\n    //Creates the wireframe for our array\n    let tempArray = Array(10).fill().map(n => Array(10).fill(0)); //Make sure the god dang thing works\n\n    console.log(tempArray); //Loop to create the actual ships\n\n    for (let i = 0; i < this.listOfShips.length; i++) {\n      //Unique ship identifier\n      let increment = i + 1; // Creates the ship, using the index of the ship array, passes in our wireframe, and the unique identifier\n\n      tempArray = this.placeShip(this.listOfShips[i], tempArray, increment);\n    } //Lets us see the populated array\n\n\n    console.log(tempArray); //Check to see if our collision worked\n\n    let check = this.checkYourWork(tempArray); //If the collision didnt work, try again until you do\n\n    while (check === false) {\n      tempArray = this.bigFunction();\n      check = this.checkYourWork(tempArray);\n    }\n\n    return tempArray;\n  } //Make sure the collission did its job\n\n\n  placeShip(arg, arr, increment) {\n    //Choose either a vertical or horizontal ship placement\n    let flipCoin = Math.floor(Math.random() * 2); //Grab a Random index for the array\n\n    let rIndexOne = Math.floor(Math.random() * arr.length);\n    let rIndexTwo = Math.floor(Math.random() * arr.length); //Make sure that the place we are setting our ship into is not taken\n\n    while (this.collisionFunct(flipCoin, rIndexOne, rIndexTwo, arr, arg) === false) {\n      //If it was taken, find a new place\n      rIndexOne = Math.floor(Math.random() * arr.length);\n      rIndexTwo = Math.floor(Math.random() * arr.length);\n    } //0 means we are looking vertically\n\n\n    if (flipCoin === 0) {\n      //Assigns the indexes with our unique idenifier\n      for (let i = 0; i < arg; i++) {\n        arr[rIndexOne + i][rIndexTwo] = increment;\n      } //0 means we are looking horizontally\n\n    } else if (flipCoin === 1) {\n      for (let i = 0; i < arg; i++) {\n        //Assigns the indexes with our unique idenifier\n        arr[rIndexOne][rIndexTwo + i] = increment;\n      }\n    } //Returns the array with the ship inside of it\n\n\n    return arr;\n  }\n\n  collisionFunct(coin, rI1, rI2, arr, arg) {\n    //I doing a vertical check if the coin was 0\n    if (coin === 0) {\n      //I create a loop to check every index for the size of my ship\n      for (let i = 0; i < arg; i++) {\n        //I create a variable to return my boolean statement\n        let x = \"\"; //I make sure that the place I am checking exists in my array\n\n        if (rI1 + i < arr.length - 1 && rI1 + arg < arr.length - i) {\n          //I check if the value I am looking at is not a 0\n          if (arr[rI1 + i][rI2] !== 0) {\n            //If I am not a 0, do not write\n            x = false;\n          } else {\n            //I am a 0, go ahead and write\n            x = true;\n          }\n        } else {\n          //I dont exist in the array, dont write anything\n          x = false;\n        } //Return my boolean at the end of my loops\n\n\n        if (i + 1 === arg) {\n          return x;\n        }\n      } // Horizontal Checking below\n\n    } else if (coin === 1) {\n      //I create a loop to check every index for the size of my ship\n      for (let i = 0; i < arg; i++) {\n        //I create a variable to return my boolean statement\n        let x = \"\"; //I make sure the place I am checking exists in my array\n\n        if (rI2 + i < arr.length - 1 && rI2 + arg < arr.length - i) {\n          //I check fi the value I am looking at is not a 0\n          if (arr[rI1][rI2 + i] !== 0) {\n            //If I am not a 0, do not write\n            x = false;\n          } else {\n            //I am a 0, go ahead and write\n            x = true;\n          } //I dont exist in the array, dont write anything\n\n        } else {\n          x = false;\n        } //Return my boolean at the end of my loops\n\n\n        if (i + 1 === arg) {\n          return x;\n        }\n      }\n    }\n  } //Lets fill our 2d array with boxes\n\n\n  boxPopulation(arr) {\n    //Start with a blank box\n    let finalArr = []; //For every array, we map an array of boxes\n\n    for (let i = 0; i < arr.length; i++) {\n      finalArr.push(arr[i].map((value, index) => {\n        return React.createElement(Box, {\n          value: value,\n          index: index,\n          ammo: this.state.ammo,\n          canShoot: this.state.canShoot,\n          tempFunt: this.tempFunt,\n          winCheck: this.winCheck,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 164\n          },\n          __self: this\n        });\n      }));\n    }\n\n    console.log(finalArr);\n    return finalArr;\n  } //Things we want to happen in the on click event\n\n\n  //Create the hp display\n  shipsHPArray(arr) {\n    let shipArray = [];\n    let healthArray = [];\n    let noComma = []; //Create an array to hold all of the health\n\n    for (let i = 0; i < this.listOfShips.length; i++) {\n      for (let j = 0; j < arr[i]; j++) {\n        //Push the hearts equal to the ship size into a string\n        healthArray.push(\"❤️\");\n        noComma = healthArray.join(\"\");\n      } //Take that string above and push that with our other text into a single string in the array\n\n\n      shipArray.push(`🚢 HP: ${noComma}`, React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228\n        },\n        __self: this\n      }));\n      healthArray = [];\n    } //Returns our final array of strings\n\n\n    return shipArray;\n  }\n\n  seeAmmo(num) {\n    let x = [];\n\n    for (let i = 0; i < num; i++) {\n      x.push(\"💣\");\n    }\n\n    this.setState({\n      ammoVisual: x\n    });\n  }\n\n  render() {\n    //Render our gameboard onto the screen\n    let start = this.boxPopulation(this.state.gameBoard);\n    let healthMap = this.state.shipHealth.map(value => value);\n    let letMeSeeAmmo = this.ammoVisual.map(value => value);\n    return (//This is a huge css mess to make it look kinda pretty sometimes\n      React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"centerBoard\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"wrap\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"outerBox\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254\n        },\n        __self: this\n      }, \"Ammo: \", letMeSeeAmmo), React.createElement(\"span\", {\n        className: \"squareIt\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257\n        },\n        __self: this\n      }, start), React.createElement(\"span\", {\n        className: \"outerBox\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"healthDisplay\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261\n        },\n        __self: this\n      }, \"Enemy Ship Health: \", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 262\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 263\n        },\n        __self: this\n      }), healthMap, React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264\n        },\n        __self: this\n      }))))), React.createElement(\"div\", {\n        className: \"centerMessage\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269\n        },\n        __self: this\n      }, this.state.winStatus === true && React.createElement(\"span\", {\n        className: \"endText onTopWinner\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272\n        },\n        __self: this\n      }, \"You Win\"), this.state.winStatus === false && React.createElement(\"span\", {\n        className: \"endText onTopLoser\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 275\n        },\n        __self: this\n      }, \"You Lose\")))\n    );\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["/Users/learn/Desktop/Battleship-prototype/src/components/Game.js"],"names":["React","Component","Box","Game","constructor","checkYourWork","arr","x","i","listOfShips","length","y","j","tempFunt","value","ammo","temp","state","deathCounter","shipHealth","newVal","newHealth","newHealthElement","split","pop","join","console","log","setState","currAmmo","seeAmmo","winStatus","gameBoard","bigFunction","shipsHPArray","ammoVisual","canShoot","tempArray","Array","fill","map","n","increment","placeShip","check","arg","flipCoin","Math","floor","random","rIndexOne","rIndexTwo","collisionFunct","coin","rI1","rI2","boxPopulation","finalArr","push","index","winCheck","shipArray","healthArray","noComma","num","render","start","healthMap","letMeSeeAmmo"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport Box from './Box'\n\nclass Game extends Component {\n\n    constructor(){\n        super()\n        //This is our ships, and how big they are\n        this.listOfShips = [4,3,2,5,3]\n        this.state = {\n            //Will have our final array of ships populated in it\n            gameBoard: this.bigFunction(),\n            shipHealth: this.shipsHPArray(this.listOfShips),\n            ammo: 50,\n            ammoVisual: [],\n            canShoot: 0,\n            winStatus: \"\",\n            deathCounter: 0\n        }\n    }\n\n    bigFunction() {\n        //Creates the wireframe for our array\n        let tempArray = Array(10).fill().map(n => Array(10).fill(0));\n\n        //Make sure the god dang thing works\n        console.log(tempArray)\n\n        //Loop to create the actual ships\n        for(let i = 0; i< this.listOfShips.length; i++){\n            //Unique ship identifier\n            let increment = i+1;\n            // Creates the ship, using the index of the ship array, passes in our wireframe, and the unique identifier\n            tempArray = this.placeShip(this.listOfShips[i], tempArray, increment)\n        }\n\n        //Lets us see the populated array\n        console.log(tempArray)\n        //Check to see if our collision worked\n        let check = this.checkYourWork(tempArray)\n\n        //If the collision didnt work, try again until you do\n        while (check === false){\n            tempArray =  this.bigFunction();\n            check = this.checkYourWork(tempArray);\n        }\n        return tempArray; \n    }\n\n    //Make sure the collission did its job\n    checkYourWork = (arr) => {\n        let x = 0;\n        //Add all the values in the array together\n        for (let i = 0; i < this.listOfShips.length; i++){\n            x += this.listOfShips[i]; \n        }\n\n        //A tracker to see how many elements are not 0\n        let y = 0;\n        for(let i = 0; i < arr.length; i++){\n            for(let j = 0; j<arr[i].length; j++){\n                if (arr[i][j] !== 0){\n                    //If you are not 0, add to the tracker\n                    y += 1;\n                }\n            }\n        }\n\n        //If we do not have matching numbers, our collision didnt work properly\n        if (x !== y){\n            return false;\n        } else if (x === y) {\n            return true;\n        }\n    }\n\n    placeShip(arg, arr, increment) {\n        //Choose either a vertical or horizontal ship placement\n        let flipCoin = Math.floor(Math.random()*2)\n\n        //Grab a Random index for the array\n        let rIndexOne = Math.floor(Math.random()*arr.length)\n        let rIndexTwo = Math.floor(Math.random()*arr.length)\n\n        //Make sure that the place we are setting our ship into is not taken\n        while (this.collisionFunct(flipCoin, rIndexOne, rIndexTwo, arr, arg) === false){\n            //If it was taken, find a new place\n            rIndexOne = Math.floor(Math.random()*arr.length)\n            rIndexTwo = Math.floor(Math.random()*arr.length)\n        }\n\n        //0 means we are looking vertically\n        if (flipCoin === 0){\n            //Assigns the indexes with our unique idenifier\n            for(let i = 0; i < arg; i++){\n                arr[rIndexOne+i][rIndexTwo] = increment;\n                \n            }\n            //0 means we are looking horizontally\n        } else if (flipCoin === 1){\n            for(let i = 0; i < arg; i++){\n                //Assigns the indexes with our unique idenifier\n                arr[rIndexOne][rIndexTwo+i] = increment;\n            }\n        }\n        //Returns the array with the ship inside of it\n        return arr;\n    }\n\n    collisionFunct(coin, rI1, rI2, arr, arg) {\n        //I doing a vertical check if the coin was 0\n        if (coin === 0){\n            //I create a loop to check every index for the size of my ship\n            for(let i = 0; i<arg; i++){\n                //I create a variable to return my boolean statement\n                let x = \"\";\n                //I make sure that the place I am checking exists in my array\n                if (rI1+i < arr.length-1 && rI1+arg < arr.length-i){\n                    //I check if the value I am looking at is not a 0\n                    if (arr[rI1+i][rI2] !== 0){\n                        //If I am not a 0, do not write\n                        x = false;\n                    } else{\n                        //I am a 0, go ahead and write\n                        x = true;\n                    }\n                } else {\n                    //I dont exist in the array, dont write anything\n                    x = false;\n                }\n                //Return my boolean at the end of my loops\n                if (i+1 === arg){ return x}\n            }// Horizontal Checking below\n        } else if (coin === 1){\n            //I create a loop to check every index for the size of my ship\n            for(let i = 0; i<arg; i++){\n                //I create a variable to return my boolean statement\n                let x = \"\";\n                //I make sure the place I am checking exists in my array\n                if (rI2+i < arr.length-1 && rI2+arg < arr.length-i){\n                    //I check fi the value I am looking at is not a 0\n                    if (arr[rI1][rI2+i] !== 0){\n                        //If I am not a 0, do not write\n                        x = false;\n                    } else{\n                        //I am a 0, go ahead and write\n                        x = true;\n                    }\n                    //I dont exist in the array, dont write anything\n                } else { x = false;}\n                //Return my boolean at the end of my loops\n                if (i+1 === arg){ return x}\n            }\n        }\n    }\n\n    //Lets fill our 2d array with boxes\n    boxPopulation(arr) {\n        //Start with a blank box\n        let finalArr = [];\n        //For every array, we map an array of boxes\n        for( let i = 0; i < arr.length; i++){\n            finalArr.push(arr[i].map((value,index) => {return(\n                <Box \n                    value = {value}\n                    index = {index}\n                    ammo = { this.state.ammo }\n                    canShoot = { this.state.canShoot }\n                    tempFunt = { this.tempFunt }\n                    winCheck = {this.winCheck}\n                />)}\n            ));\n        }\n        console.log(finalArr)\n        return finalArr\n    }\n\n    //Things we want to happen in the on click event\n    tempFunt = (value, ammo) => {\n        //Keep track of how many ships are dead\n        let temp = this.state.deathCounter\n        \n        //This is broken - WIP\n        for(let i = 0; i < this.state.shipHealth.length; i++){\n            let newVal = (value-1)*2\n            if(i === newVal){\n                let newHealth = this.state.shipHealth\n                let newHealthElement = newHealth[i];\n                let x = newHealthElement.split(\"\")\n                x.pop()\n                x.pop()\n                newHealth[i] = x.join(\"\")\n                console.log(\"New Health: \", newHealth)\n                console.log(\"New Health Element\", newHealthElement)                \n                this.setState({shipHealth: newHealth})\n                console.log(this.state.shipHealth);\n            }\n            \n        }\n\n        //Ammo Tracker\n        if (ammo > 0){\n            let currAmmo = ammo;\n            currAmmo -= 1;\n            this.setState({ ammo : currAmmo })\n            this.seeAmmo(this.state.ammo);\n            //If we are out of ammo you lose\n            if (currAmmo === 0){\n                this.setState({ winStatus: false})\n            }\n        }\n    }\n    \n    //Create the hp display\n    shipsHPArray(arr) {\n        let shipArray = [];\n        let healthArray = [];\n        let noComma = []\n\n        //Create an array to hold all of the health\n        for (let i = 0; i < this.listOfShips.length; i++){\n            for (let j = 0; j< arr[i]; j++){\n                //Push the hearts equal to the ship size into a string\n                healthArray.push(\"❤️\")\n                noComma = healthArray.join(\"\");\n            }\n            //Take that string above and push that with our other text into a single string in the array\n            shipArray.push(`🚢 HP: ${noComma}`, <br/>)\n            healthArray = [];\n        }\n        //Returns our final array of strings\n        return shipArray\n    }\n\n    seeAmmo (num) {\n        let x = []\n        for(let i = 0; i < num ; i++){\n            x.push(\"💣\")\n        }\n        this.setState({ ammoVisual: x})\n    }\n\n    render(){\n        //Render our gameboard onto the screen\n        let start = this.boxPopulation(this.state.gameBoard);\n        let healthMap = this.state.shipHealth.map(value => value)\n        let letMeSeeAmmo = this.ammoVisual.map(value => value)\n        \n        return (\n            //This is a huge css mess to make it look kinda pretty sometimes\n            <div>\n                <div className = \"centerBoard\">\n                    <div className = \"wrap\">\n                        <p className = \"outerBox\">\n                            Ammo: {letMeSeeAmmo}\n                        </p>\n                        <span className = \"squareIt\">\n                            { start }\n                        </span>\n                        <span className = \"outerBox\">\n                            <p className = \"healthDisplay\">\n                            Enemy Ship Health: <br/>\n                            <br/>\n                            { healthMap }<br/>\n                            </p>\n                        </span> \n                    </div>\n                </div>\n                <div className = \"centerMessage\">\n                    {/* If we won, show we won, if we lost, show we lost. */}\n                    {this.state.winStatus === true &&\n                        <span className = \"endText onTopWinner\">You Win</span>\n                    }\n                    {this.state.winStatus === false &&\n                        <span className = \"endText onTopLoser\">You Lose</span>\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Game;"]},"metadata":{},"sourceType":"module"}